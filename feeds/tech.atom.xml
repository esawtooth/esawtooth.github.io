<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>rohitja.in</title><link href="http://rohitja.in/" rel="alternate"></link><link href="http://rohitja.in/feeds/tech.atom.xml" rel="self"></link><id>http://rohitja.in/</id><updated>2013-11-30T19:55:00+05:30</updated><entry><title>From vim to emacs</title><link href="http://rohitja.in/vim-emacs.html" rel="alternate"></link><published>2013-11-30T19:55:00+05:30</published><author><name>Rohit Jain</name></author><id>tag:rohitja.in,2013-11-30:vim-emacs.html</id><summary type="html">&lt;p&gt;I grew up as a programmer on vim. In my first week at college, I was
treated to an interesting discourse on the virtues of vim, emacs and
their ilk from Prof. Suban which first lead me to appreciate them
better. Vim is simple, and very quickly becomes a part of the
background. You forget that it exists, as you work through the code. Its
loaded with some amazing stuff that can really make you productive, yet
at the same time, it simply does not throw that at you all at once. You
can learn how to use it after following through the first few screens of
vimtutor, and that can be enough for all the editing you will ever
do. Just when you start getting frustrated with doing repetitive stuff
on the screen and start searching around for a smarter way, you will
quickly spot a promising command that will make very short work of the
problem. vim is awesome, and I spent close to six years using it as my
editor of choice.&lt;/p&gt;
&lt;p&gt;A few months ago, reading though some of
&lt;a href="http://steve-yegge.blogspot.in/"&gt;Steve Yegge&lt;/a&gt;'s posts about emacs
convinced me to give emacs a try. This wasn't the first time I had fired
up emacs. I had been through its tutorial a time or two before and could
make my way through it without finding it too alien. However, this time,
I had decided to give it a week. Since then, I have not come back to
using vim. Working with emacs was a period of rediscovery in text
editing. When I was working with vim, my approach to using it was very
functional and lazy. I would only care to learn about something in vim,
when the choice I had was between learning more about my editor or
spending a couple of hours doing things the mundane way. Emacs however,
is nowhere as humble as vim is! Working with the former, I felt that
there was a lot more that I could get done, if I could only learn how to
use feature X properly. And emacs has a quite a few of such feature Xs.&lt;/p&gt;
&lt;p&gt;However despite the apparent promiscuity of emacs, it is a very focused
editor. The coherence of its interface is extremely refreshing. Also, it
makes it very easy to work with complex commands. It infers more about
the text, and its nature when providing its interface, unlike vim, which
does precisely what it is asked to do more often than not. Another
interesting facet of emacs is that it can be used as a complete and
flexible development environment and handle duties as my terminal of
choice, windowing manager, ssh/grep replacement, magit version control,
org mode goodness and a whole lot more.&lt;/p&gt;</summary><category term="tech"></category></entry><entry><title>First Steps</title><link href="http://rohitja.in/first-steps.html" rel="alternate"></link><published>2013-11-30T14:55:00+05:30</published><author><name>Rohit Jain</name></author><id>tag:rohitja.in,2013-11-30:first-steps.html</id><summary type="html">&lt;p&gt;I suppose it was long past time that I started blogging. I love to
write. I also love technology and the ecosystem that surrounds
it. However, despite the presence of both of those two passions, I could
never quite see the charm in creating a blog. A fair bit of that, in
hindsight, had to do with not feeling at home with writing a bunch of
stuff inside a textarea in a browser, however nice. The tools we use to
give effect to our creations are rather important. I prefer writing on
paper, where the smell of the ink, the sounds of the nib hitting the
paper, and the shadings in the colours generate an effect that cannot
easily be communicated. However, now that I begin to write words out on
my vanilla emacs frame, while knowing that I am being much more
efficient a writer and an editor than I ever could manage to be, on my
best day on paper, not to mention the potential of a reader, I think
that it might now, just be worth it.&lt;/p&gt;
&lt;p&gt;Let me start out with a brief description of how this blog exists, and
what ideas and requirements influenced its form. When I decided to start
writing stuff online, I felt that the following were important for me to
do a reasonable job:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The editor should be emacs et al.:&lt;/strong&gt; I refused to write inside a
  browser window, with few, if any editing controls at my disposal. If I
  need to write a bunch of stuff, the editor just &lt;em&gt;has&lt;/em&gt; to get out of my
  way. That was not going to happen without a lot of effort inside a
  browser textarea.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The formatting should be minimal:&lt;/strong&gt; I wanted to focus on content,
  and not how it appears. The appearance should be consistent and nice,
  but when creating content, the design really should matter very
  little. Latex makes a lot of sense to me, given that it defines a
  clear focus on describing the document being written, instead of how
  it should appear. Markdown is a lot simpler though for now, not to
  mention faster and more specific.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The content should be under versioning:&lt;/strong&gt; Versioning digital content
  of any kind, makes a lot of sense to me. While I doubt I would be
  doing a lot of branching in the git repo holding this stuff, the diffs
  in the content directory are no doubt going to be helpful, if nothing
  else, then for me to be able to see how my writing has changed over
  the months (if this blog lasts that long).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The idea of a static blog generator, with &lt;a href="https://heroku.com/"&gt;heroku&lt;/a&gt;
that supports deployments on git push seem to fit the bill quite
nicely. The posts are simply markdown pieces of text, with some yaml
metadata on the top that is very easy to make sense of. The entire setup
seems to nicely get out of the way of creating content. The presence of
a database is mostly unnecessary for my requirements. So this is what I
am doing right now. I am using &lt;a href="http://octopress.org/"&gt;Octopress&lt;/a&gt; to
write my posts and am publishing them to heroku. The instructions
&lt;a href="http://def.reyssi.net/blog/2012/01/14/get-blogging-with-octopress-on-heroku/"&gt;here&lt;/a&gt;
by Sam are rather good. The only deviation I needed to make them work
for me was to use ruby v1.9.3 instead of v1.9.2, the latter of which
does not play well with the markdown library octopress uses. I also
tried out &lt;a href="http://zespia.tw/hexo/"&gt;hexo&lt;/a&gt; for a while. However, I felt
that its not very mature right now. Octopress seems to have a much more
active community and that definitely matters a great deal as well. I
felt that Hexo was considerably simpler to deploy, however, and faster
to get started with as well, particularly on heroku. Perhaps I will take
a look at it again someday. Right now, I am too happy to be writing
stuff to be very concerned about it.&lt;/p&gt;</summary><category term="tech general"></category></entry></feed>